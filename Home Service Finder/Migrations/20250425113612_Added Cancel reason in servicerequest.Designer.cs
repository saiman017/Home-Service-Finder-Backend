// <auto-generated />
using System;
using Home_Service_Finder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Home_Service_Finder.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250425113612_Added Cancel reason in servicerequest")]
    partial class AddedCancelreasoninservicerequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Home_Service_Finder.Authentication.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("ExpriesOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", "Users");
                });

            modelBuilder.Entity("Home_Service_Finder.Email.EmailOTP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(6)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("ExpiryTime");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsUsed");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailOTP", "Users");
                });

            modelBuilder.Entity("Home_Service_Finder.Locations.Location", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .HasColumnType("varchar")
                        .HasColumnName("City");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedAt");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar")
                        .HasColumnName("PostalCode");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("UserId");

                    b.ToTable("Location", "Locations");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceOffers.ServiceOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("ExpiresAt");

                    b.Property<decimal>("OfferedPrice")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("OfferedPrice");

                    b.Property<string>("PaymentReason")
                        .HasColumnType("TEXT")
                        .HasColumnName("PaymentReason");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("PaymentStatus");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("SentAt");

                    b.Property<Guid>("ServiceProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceOffer", "Requests");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CancelReason")
                        .HasColumnType("TEXT")
                        .HasColumnName("CancelReason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("ExpiresAt");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("LocationAddress");

                    b.Property<string>("LocationCity")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("LocationCity");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<double>("LocationLatitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("LocationLatitude");

                    b.Property<double>("LocationLongitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("LocationLongitude");

                    b.Property<string>("LocationPostalCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("LocationPostalCode");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceRequest", "Requests");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequestImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ImagePath");

                    b.Property<Guid>("ServiceRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceRequestImage", "Requests");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequestServiceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("ServiceListId");

                    b.ToTable("ServiceRequestServiceList", "Requests");
                });

            modelBuilder.Entity("Home_Service_Finder.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Role", "Users");
                });

            modelBuilder.Entity("Home_Service_Finder.ServiceCategories.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("CategoryImage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ServieCategory", "Services");
                });

            modelBuilder.Entity("Home_Service_Finder.ServicesList.ServiceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceList", "Services");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.ServiceProvider.ServiceProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Experience")
                        .HasColumnType("INT")
                        .HasColumnName("Experience");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsAdminVerified")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsAdminVerified");

                    b.Property<string>("PersonalDescription")
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("PersonalDescription");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceProvider", "Users");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.UserDetails.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("DATE")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("ProfilePicture");

                    b.HasKey("Id");

                    b.ToTable("UserDetail", "Users");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("IsEmailVerified");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TIMESTAMPTZ")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "Users");
                });

            modelBuilder.Entity("Home_Service_Finder.Authentication.RefreshToken", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home_Service_Finder.Email.EmailOTP", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home_Service_Finder.Locations.Location", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.Users.User", "User")
                        .WithOne("Location")
                        .HasForeignKey("Home_Service_Finder.Locations.Location", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceOffers.ServiceOffer", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.ServiceProvider.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequest", "ServiceRequest")
                        .WithMany("Serviceoffers")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequest", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.Users.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home_Service_Finder.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home_Service_Finder.ServiceCategories.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequestImage", b =>
                {
                    b.HasOne("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequest", "ServiceRequest")
                        .WithMany("Images")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequestServiceList", b =>
                {
                    b.HasOne("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceRequestServiceLists")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home_Service_Finder.ServicesList.ServiceList", "ServiceList")
                        .WithMany()
                        .HasForeignKey("ServiceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceList");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Home_Service_Finder.ServicesList.ServiceList", b =>
                {
                    b.HasOne("Home_Service_Finder.ServiceCategories.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.ServiceProvider.ServiceProvider", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home_Service_Finder.ServiceCategories.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.UserDetails.UserDetail", b =>
                {
                    b.HasOne("Home_Service_Finder.Users.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.Users.User", b =>
                {
                    b.HasOne("Home_Service_Finder.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Home_Service_Finder.RequestServices.ServiceRequest.ServiceRequest", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ServiceRequestServiceLists");

                    b.Navigation("Serviceoffers");
                });

            modelBuilder.Entity("Home_Service_Finder.ServiceCategories.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Home_Service_Finder.Users.Users.User", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
